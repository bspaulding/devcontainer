name: Docker

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    strategy:
      matrix:
        base: ['alpine:latest', 'ubuntu:latest', 'clojure:openjdk-17-tools-deps-alpine']

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_NAME=$(echo "${{ matrix.base }}" | cut -d':' -f1)
          echo IMAGE_NAME=$IMAGE_NAME
          IMAGE_TAG=$(echo "${{ matrix.base }}" | cut -d':' -f2)
          echo IMAGE_TAG=$IMAGE_TAG

          docker build . --file Dockerfile --build-arg base=${{ matrix.base }} --tag $IMAGE_NAME:$IMAGE_TAG

          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          docker tag $IMAGE_NAME $IMAGE_ID:$IMAGE_TAG
          docker push $IMAGE_ID:$IMAGE_TAG

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          [ "$VERSION" == "main" ] && VERSION=latest
          VERSION=${{ matrix.base }}-$VERSION

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          # retag alpine as latest
          [ "$VERSION" == "alpine-latest" ] && docker tag $IMAGE_NAME $IMAGE_ID:latest || echo "skipped retagging because not alpine-latest"
          [ "$VERSION" == "alpine-latest" ] && docker push $IMAGE_ID:latest || echo "skipped pushing latest because not alpine-latest"

          echo "done!"
